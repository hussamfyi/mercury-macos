---
description: Generate Linear Project, Issues and Sub-issues from PRD and Tasks
globs: 
alwaysApply: false
---

# Rule: Generating Linear Project, Issues and Sub-issues from Documentation

## Goal

To guide an AI assistant in creating a complete Linear project structure with proper issue hierarchy based on existing PRD and task documentation files.

## When to Use This Rule

Use this rule when the user requests creation of Linear project, issues, and sub-issues from existing documentation in `/documentation/[feature-name]/` folder.

## Prerequisites

Before using this rule, ensure:
1. PRD file exists: `/documentation/[feature-name]/prd-[feature-name].md`
2. Tasks file exists: `/documentation/[feature-name]/tasks-[prd-file-name].md`
3. User has confirmed they want Linear integration

## Process

### Step 1: Read Documentation Files
1. Read the complete PRD file to understand project scope and requirements
2. Read the tasks file to understand the numbered task structure (1.0, 2.0, etc.)
3. Identify all numbered parent tasks and their sub-tasks (1.1, 1.2, etc.)

### Step 2: Create Linear Project
1. Use `mcp__linear__create_project` with:
   - **name**: Use the exact PRD title (e.g., "Mercury X API Authentication Component")
   - **teamId**: Get from `mcp__linear__list_teams` (usually Mercury team)
   - **description**: Copy the COMPLETE PRD content verbatim (entire markdown file content)
2. Note the returned project ID for subsequent issue creation

### Step 3: Create Parent Issues
For each numbered task in the tasks file (1.0, 2.0, 3.0, etc.):
1. Use `mcp__linear__create_issue` with:
   - **title**: Use exact task title from tasks file (e.g., "1.0 Set up X Developer Portal and CLI Project Structure")
   - **teamId**: Same as project
   - **projectId**: From Step 2
   - **description**: Create junior-developer-friendly description including:
     - Brief explanation of what the task accomplishes
     - Key components or deliverables
     - Files that will be created/modified
     - Clear acceptance criteria
   - **priority**: High (2) for Phases 1-3, Medium (3) for Phases 4-6
2. Save the returned issue ID for sub-issue creation

### Step 4: Create Sub-issues
For each sub-task under numbered tasks (1.1, 1.2, 1.3, etc.):
1. Use `mcp__linear__create_issue` with:
   - **title**: Use exact sub-task title from tasks file (e.g., "1.1 Create new X Developer Portal app")
   - **teamId**: Same as project
   - **projectId**: Same as project
   - **parentId**: The issue ID from Step 3 for the corresponding parent task
   - **description**: Create actionable description including:
     - Specific steps to complete the sub-task
     - Technical implementation details
     - Files or components involved
     - Clear acceptance criteria
   - **priority**: Same as parent issue

## Output Structure

The resulting Linear structure should be:
```
Project: [Feature Name] (contains complete PRD)
├── Issue 1.0: [Parent Task Title]
│   ├── Sub-issue 1.1: [Sub-task Title]
│   ├── Sub-issue 1.2: [Sub-task Title]
│   └── Sub-issue 1.3: [Sub-task Title]
├── Issue 2.0: [Parent Task Title]
│   ├── Sub-issue 2.1: [Sub-task Title]
│   └── Sub-issue 2.2: [Sub-task Title]
└── ... (continue for all numbered tasks)
```

## Key Requirements

1. **Complete PRD Copy**: The Linear project description MUST contain the complete, untruncated PRD content
2. **Exact Title Mapping**: Issue and sub-issue titles MUST match the task file exactly
3. **Proper Hierarchy**: Use `parentId` parameter to create proper parent-child relationships
4. **Junior Developer Focus**: All descriptions should be clear enough for a junior developer to understand and execute
5. **File References**: Include specific file paths and technical details in descriptions
6. **Acceptance Criteria**: Every issue and sub-issue must have clear success criteria

## Error Prevention

- Always read the complete PRD and tasks files before starting
- Verify team ID exists before creating project
- Save and reuse project ID for all issues
- Save parent issue IDs for sub-issue creation
- Don't truncate PRD content in project description
- Include technical context and file paths in all descriptions

## Integration with Existing Workflows

This rule should be referenced in CLAUDE.md and used after:
1. PRD creation (create-prd.mdc)
2. Task generation (generate-tasks.mdc)
3. When user explicitly requests Linear integration

The Linear structure will then support the task execution workflow (process-task-list.mdc) with proper issue tracking and status updates.